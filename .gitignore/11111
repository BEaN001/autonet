from math import *
import numpy as np
def seven_segment(pattern):

    def to_bool(a):
        if a==1:
            return True
        return False
    

    def hor(d):
        if d:
            print(" _ ")
        else:
            print("   ")
    
    def vert(d1,d2,d3):
        word=""

        if d1:
            word="|"
        else:
            word=" "
        
        if d3:
            word+="_"
        else:
            word+=" "
        
        if d2:
            word+="|"
        else:
            word+=" "
        
        print(word)

    

    pattern_b=list(map(to_bool,pattern))

    hor(pattern_b[0])
    vert(pattern_b[1],pattern_b[2],pattern_b[3])
    vert(pattern_b[4],pattern_b[5],pattern_b[6])

    number=0
    for i in range(0,4):
        if pattern_b[7+i]:
            number+=pow(2,i)
    print(int(number))

def sign(number):
    state = 0
    if number > 0:
        state = 1
    else:
        state = -1

    return state

def energy(weight, pattern):
    E = 0

    pattern = np.array(pattern)

    n= len(pattern)

    for i in range(n):
        for j in range(n):
            E += pattern[i] * weight[i][j] * pattern[j]

    E *= (-0.5)

    return E

def weight(pattern):#caculate the weight matrix
    
    pattern = np.array(pattern)
    #print(pattern)
    n=len(pattern)# n=11
    w=np.zeros((n,n))
    for i in range(n):
        for j in range(i+1,n):
            w[i][j]+=pattern[i]*pattern[j]
            w[j][i]=w[i][j]
    return w
        
def update(test,weight):
    n=len(test) #11
 #   newtest=[]

    a = np.zeros(n)
    
    #for i in range(n):
        #newtest.append(np.dot(test,weight[i]))
    for i in range(0, n):
        for j in range(0, n):
            if i != j:
                a[i] += weight[i][j] * test[j]

        a[i] = sign(a[i])
        
    print(a)
    print("energy is ", energy(weight, a))
    stable = (a == test).all()
    
    return (a,stable)

def evolve(weight, test):
    stable=False
    step=1
    while(stable == False):
        (test, stable)=update(test,W)

        seven_segment(test)
        step=step+1
    

#main
six=[1,1,-1,1,1,1,1,-1,1,1,-1]
three=[1,-1,1,1,-1,1,1,1,1,-1,-1]
one=[-1,-1,1,-1,-1,1,-1,1,-1,-1,-1]

seven_segment(three)
seven_segment(six)
seven_segment(one)

W=(weight(six)+weight(three)+weight(one)) / 3
#print(W)

print("energy of six is ", energy(W, six))
print("energy of three is ", energy(W, three))
print("energy of one is ", energy(W, one))

print("test1")

test=[1,-1,1,1,-1,1,1,-1,-1,-1,-1]

    
#here the network should run printing at each step
evolve(weight, test)

print("test2")

test=[1,1,1,1,1,1,1,-1,-1,-1,-1]

seven_segment(test)

#here the network should run printing at each step
evolve(weight, test)
