from math import *
import numpy as np
def seven_segment(pattern):

    def to_bool(a): # true or false
        if a==1:
            return True
        return False
    
    def hor(d):
        if d:
            print(" _ ")
        else:
            print("   ")
    
    def vert(d1,d2,d3):
        word=""

        if d1:
            word="|"
        else:
            word=" "
        
        if d3:
            word+="_"
        else:
            word+=" "
        
        if d2:
            word+="|"
        else:
            word+=" "
        
        print(word)
    
    pattern_b=list(map(to_bool,pattern)) #map need list in py3

    hor(pattern_b[0])
    vert(pattern_b[1],pattern_b[2],pattern_b[3])
    vert(pattern_b[4],pattern_b[5],pattern_b[6])

    number=0
    for i in range(0,4):
        if pattern_b[7+i]:
            number+=pow(2,i)
    print(int(number))
 
def weight_matrix(patterns):
    n=len(patterns[0]) #n: the size of one pattern here is 11
    N=len(patterns) #N: the number of patterns here is 3
    weights=np.zeros((n,n))
    for a in patterns: # a: ath pattern
        for i in range(n):
            for j in range(i+1,n):
                weights[i][j] += a[i]*a[j]
                weights[j][i]=weights[i][j]
    weights=1/N*weights
    return weights
    
def update(test,weights,converge):
    test=np.array(test)
    #print(test)
    updatetest=np.zeros((len(test),1))
    
    for i in range(len(test)):  
        updatetest[i]=np.dot(test,weights[i])        
        if updatetest[i]>0:
            updatetest[i]=1
        else:
            updatetest[i]=-1
   # print(updatetest)
    diff=0;
    for i in range(len(test)):
        diff += abs(test[i]-updatetest[i])
    if diff==0:
        converge=1
    #if (updatetest==test).all():
    #    converge=1
    #updatetest=list(updatetest)  
    return (updatetest,converge)
     
def energy(weights,pattern):
    E=0
    for i in range(len(pattern)):
        for j in range(len(pattern)):
            E += pattern[i]*weights[i][j]*pattern[j]
    E=-0.5*E
    return E            




six=[1,1,-1,1,1,1,1,-1,1,1,-1] # first seven -- the seven-segment display; remaining four -- the number in a sort of binary
three=[1,-1,1,1,-1,1,1,1,1,-1,-1]
one=[-1,-1,1,-1,-1,1,-1,1,-1,-1,-1]
patterns=[six,three,one]
patterns = [np.array(p) for p in patterns] # change from list to array

seven_segment(three)
seven_segment(six)
seven_segment(one)

weights=weight_matrix(patterns)
#print(weights)
####here print out the energy of the three learned patterns

print("The energy of pattern six is "+str(energy(weights,six)))
print("The energy of pattern three is "+str(energy(weights,three)))
print("The energy of pattern one is "+str(energy(weights,one)))


####test1
print("..........................test1...................................")

test=[1,-1,1,1,-1,1,1,-1,-1,-1,-1]
converge=0
k=1
while(converge<1):
    result=update(test,weights,converge)
    temptest=result[0]
    test=[]
    for i in range(len(temptest)):
        test.append(list(temptest[i])[0])
   # print(test)
    converge=result[1]
    print('timestep:'+str(k))
    if converge==0:
        print("It has not converged...")
    else:
        print("It has converged!!!")
    print("The current pattern is"+str(test))    
    seven_segment(test)
    print("The energy is"+str(energy(weights,test))) 
    k=k+1

 

####test2
print("..........................test2...................................")

test=[1,1,1,1,1,1,1,-1,-1,-1,-1]
converge=0
k=1
while(converge<1):
    result=update(test,weights,converge)
    temptest=result[0]
    test=[]
    for i in range(len(temptest)):
        test.append(list(temptest[i])[0])
   # print(test)
    converge=result[1]
    print('timestep:'+str(k))
    if converge==0:
        print("It has not converged...")
    else:
        print("It has converged!!!")
    print("The current pattern is"+str(test))    
    seven_segment(test)
    print("The energy is"+str(energy(weights,test)))
    k=k+1

